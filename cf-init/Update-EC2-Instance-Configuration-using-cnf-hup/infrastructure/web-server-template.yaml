AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Web server stack template for
  AWS CloudFormation Step by Step: Intermediate to Advanced course.

Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI of the web server instance

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The public subnet that the instance will be launched into

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id 
    Description: The security group that will be attached to the instance

  WebsiteBucket:
    Type: String

Resources:
  WebServerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Authentication:
        WebsiteBucketCredentials:
          type: S3
          buckets:
            - !Ref WebsiteBucket
          roleName: !Ref WebServerRole
      AWS::CloudFormation::Init:
        configSets:
          myConfigSet:
            - cfnHupConfig
            - extrasRepoConfig
            - nginxConfig
        cfnHupConfig:
          files:
            /etc/cfn/cfn-hup.conf:
              group: root
              user: root
              mode: '000400'
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=3
                verbose=true
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              group: root
              user: root
              mode: '000400'
              content: !Sub |
                [cfn-auto-reloader]
                triggers=post.add,post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --configsets myConfigSet --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf              
        extrasRepoConfig:
          commands:
            01_enable_nginx: 
              command: 'amazon-linux-extras enable nginx1'
        nginxConfig:
          packages:
            yum:
              nginx: []
          sources:
            /usr/share/nginx/html: !Sub 'https://s3.${AWS::Region}.amazonaws.com/${WebsiteBucket}/my-website-v2.zip'
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/nginx.conf
                sources:
                  - /usr/share/nginx/html
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref ImageId
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebServer'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init -v --configsets myConfigSet --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}

  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: WebsiteBucketAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - 
                Effect: Allow
                Action:
                  - 's3:Get*'
                Resource:
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebServerRole

Outputs:
  WebServerPublicDNS:
    Description: Public DNS name of the web server instance
    Value: !GetAtt WebServerInstance.PublicDnsName